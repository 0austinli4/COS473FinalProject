```solidity
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./IERC20Metadata.sol";

contract ERC20 is IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    address public _owner;

    constructor() {
        _owner = msg.sender; // Initialize owner in the constructor
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "ERC20: must be owner");
        _;
    }

    function name() public view virtual override returns (string memory) {
        return "MyToken"; // Updated token name
    }

    function symbol() public view virtual override returns (string memory) {
        return "MTK"; // Updated token symbol
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        ); 

        _approve(sender, msg.sender, currentAllowance - amount);

        _transfer(sender, recipient, amount);

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        override
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] + addedValue
        ); 
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        override
        returns (bool)
    {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        
        _approve(msg.sender, spender, currentAllowance - subtractedValue);

        return true;
    }

    // Other functions remain the same

    function mint(address account, uint256 amount) onlyOwner() public virtual override {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function burn(address account, uint256 amount) onlyOwner() public virtual override {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");

        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    // Other functions remain the same
}
```

**Updated:** 
- Added initialization for `_owner` in the constructor.
- Updated `name()` and `symbol()` functions to return specific token name and symbol.
- Fixed the logic in `transferFrom()` and `decreaseAllowance()` functions to properly update allowances.
- Added the `onlyOwner` modifier in the `mint()` and `burn()` functions to ensure only the owner can call them.